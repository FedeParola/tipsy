# -*- mode: python; -*-

# TIPSY: Telco pIPeline benchmarking SYstem
#
# Copyright (C) 2017-2018 by its authors (See AUTHORS)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

import re
import os
import socket
import struct
import json
import time
import subprocess

# ----------------------------------------------------------------------------------

bess_inport = int($inport!'0')
bess_outport = int($outport!'0')
conf_file = $config!'./mgw_u1_s1_b1_n1.json'


class ObjectView(object):
    def __init__(self, **kwargs):
        self.__dict__.update(kwargs)

    def __repr__(self):
      return self.__dict__.__repr__()


try:
  with open(conf_file, 'r') as f:
    conv_fn = lambda d: ObjectView(**d)
    conf = json.load(f, object_hook=conv_fn)
except:
  raise IOError('Error loading config: %s' % conf_file)


# ----------------------------------------------------------------------------------

def aton(ip):
  return socket.inet_aton(ip)

def mac_from_str(s):
  return ''.join([ chr(int(c, 16)) for c in s.split(':') ])

def mac_int_from_str(s):
  return int("0x%s" % ''.join(s.split(':')), 16)


# ----------------------------------------------------------------------------------

bess_workers = conf.core
portIn = PMDPort(port_id=bess_inport,
                 num_inc_q=bess_workers,
                 num_out_q=bess_workers)

if bess_inport == bess_outport:
  portOut = portIn
else:
  portOut = PMDPort(port_id=bess_outport,
                    num_inc_q=bess_workers,
                    num_out_q=bess_workers)


# ----------------------------------------------------------------------------------

for wid in range(bess_workers):
  input = QueueInc(port=portIn.name, qid=wid)
  output = QueueOut(port=portOut.name, qid=wid)
  buf = Buffer(name='out_buf_%d' % wid)

  if conf.fakedrop:
    drop = buf
  else:
    drop = Sink()

  bess.add_worker(wid, wid)

  l2_fwd = ExactMatch(name='l2_fwd_%d' % wid,
                      fields=[{'offset': 0, 'num_bytes': 6}]) # dst MAC
  l2_fwd.add(fields=[{'value_bin': mac_from_str(conf.gw.mac)}], gate=0)
  l2_fwd.set_default_gate(gate=1)

  ethertype = ExactMatch(name='ethertype_%d' % wid,
                         fields=[{'offset': 12, 'num_bytes': 2}]) # ethertype
  ethertype.add(fields=[{'value_bin': struct.pack("!H", 0x0800)}], gate=0)
  ethertype.set_default_gate(gate=1)

  dir_selector = ExactMatch(name='dir_selector_%d' % wid,
                            fields=[{'offset': 30, 'num_bytes': 4},   # dst IP
                                    {'offset': 23, 'num_bytes': 1},   # IP proto
                                    {'offset': 36, 'num_bytes': 2}])  # dst port
  dir_selector.add(fields=[{'value_bin': aton(conf.gw.ip)},
                           {'value_bin': chr(17)},
                           {'value_bin': struct.pack("!H", 4789)}], # VXLAN port
                   gate=0) # uplink
  dir_selector.set_default_gate(gate=1) # downlink

  # uplink
  vxlan_decap = VXLANDecap()
  teid_split = Split(name='teid_split_%d' % wid,
                     attribute='tun_id', size=4)

  ip_lookup = IPLookup(name='ip_lookup_%d' % wid,
                       max_rules=8192)
  ip_lookup.add(prefix='0.0.0.0', prefix_len=0, gate=0)

  buf2 = Buffer(name='prel3_buf_%d' % wid)

  for user in conf.users:
    teid = user.teid
    name = "t_%d_%d" % (wid, teid)
    q = Queue(name='rl_%d_%d' % (wid, teid))
    bess.add_tc(name, policy='rate_limit',
                resource='bit', limit={'bit': user.rate_limit},
                wid=wid)
    q.attach_task(parent=name)
    teid_split:teid -> q -> buf2

  uttl = UpdateTTL(name='uttl_%d' % wid) # Bring before ip_lookup?
  nhop_split = Split(name='nhop_split_%d' % wid,
                     attribute='nhop', size=4)

  for i,srv in enumerate(conf.srvs, start=1):
    ip = re.sub(r'\.[^.]+$', '.0', srv.ip)
    ip_lookup.add(prefix=ip, prefix_len=24, gate=i)
    nmd = SetMetadata(name='setmd_srv%d_%d' % (i, wid),
                      attrs=[{'name': 'nhop', 'size': 4,
                              'value_int': srv.nhop}])
    ip_lookup:i -> nmd -> nhop_split

  for i,nhop in enumerate(conf.nhops):
    update_s_mac = Update(name='u_nhop%d_smac_%d' % (i, wid),
                          fields=[{'offset': 6, 'size': 6,
                                   'value': mac_int_from_str(nhop.smac)}])
    update_d_mac = Update(name='u_nhop%d_dmac_%d' % (i, wid),
                          fields=[{'offset': 0, 'size': 6,
                                   'value': mac_int_from_str(nhop.dmac)}])
    nhop_split:i -> update_s_mac -> update_d_mac -> uttl

  # downlink
  ue_selector = ExactMatch(name='ue_selector_%d' % wid,
                           fields=[{'offset': 30, 'num_bytes': 4}]) # dst IP

  vxlan_encap = VXLANEncap(name='vxlan_encap_%d' % wid)
  for user in conf.users:
    ue_selector.add(fields=[{'value_bin': aton(user.ip)}],
                             gate=user.teid)
    tun_ip_dst = conf.bsts[user.tun_end].ip
    vxlan_md = SetMetadata(name='setmd_dl_%d_%d' % (user.teid, wid),
                           attrs=[{'name': 'tun_id', 'size': 4,
                                   'value_int': user.teid},
                                  {'name': 'tun_ip_src', 'size': 4,
                                   'value_bin': aton(conf.gw.ip)},
                                  {'name': 'tun_ip_dst', 'size': 4,
                                   'value_bin': aton(tun_ip_dst)}])
    ue_selector:user.teid -> vxlan_md -> vxlan_encap

  for i,bst in enumerate(conf.bsts, start=len(conf.srvs)+1):
    ip_lookup.add(prefix=bst.ip, prefix_len=32, gate=i)
    update_s_mac = Update(name='u_bst%d_smac_%d' % (bst.id, wid),
                          fields=[{'offset': 6, 'size': 6,
                                   'value': mac_int_from_str(conf.gw.mac)}])
    update_d_mac = Update(name='u_bst%d_dmac_%d' % (bst.id, wid),
                          fields=[{'offset': 0, 'size': 6,
                                   'value': mac_int_from_str(bst.mac)}])
    ip_lookup:i -> update_s_mac -> update_d_mac -> uttl

  input -> l2_fwd

  l2_fwd:0 -> ethertype
  l2_fwd:1 -> drop

  ethertype:0 -> dir_selector
  ethertype:1 -> buf # arp, infraCP (not implemented)

  dir_selector:0 -> vxlan_decap -> teid_split
  dir_selector:1 -> ue_selector

  ip_lookup:0 -> drop
  buf2 -> ip_lookup

  vxlan_encap -> IPEncap() -> EtherEncap() -> teid_split

  uttl -> buf -> output

  bess.attach_task(input.name, wid=wid)

bess.track_module(m='', enable=False, bits=False, direction='out', gate=-1)
bess.track_module(m='', enable=False, bits=True, direction='out', gate=-1)
