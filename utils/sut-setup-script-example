#!/usr/bin/env python3
#
# A sample script to be used as sut.setup-script.
# It reboots SUT if current sut.type is different from the previous one.
#
# Copyright (C) 2018 by its authors (See AUTHORS)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

import json
import subprocess
import time
from pathlib import Path, PosixPath

class Config(dict):
    def __init__(self, *files, **kwargs):
        self.update(kwargs)
        for f in files:
            self.load(f)

    def __getattr__(self, name):
        return self[name.replace('_', '-')]

    def __setattr__(self, name, value):
        self[name.replace('_', '-')] = value

    def __delattr__(self, name):
        del self[name.replace('_', '-')]

    def load(self, file):
        """Update dict with json encode data from `file`.
        file is a filename or Path."""

        oh = lambda x: Config(**x)
        try:
            if type(file) == PosixPath:
                with file.open('r') as f:
                    data = json.load(f, object_hook=oh)
            else:
                with open(file, 'r') as f:
                    data = json.load(f, object_hook=oh)
        except Exception as e:
            print(e)
            exit(-1)
        self.update(**data)


class Reboot(object):
    def __init__(self):
        fname = '/tmp/tipsy_sut_type'
        conf = Config(Path().cwd() / 'benchmark.json')
        self.hostname = conf.sut.hostname
        new_type = conf.sut.type
        old_type = self.get_remote_file_content(fname)
        print('new_type: \033[33m%s\033[0m' % new_type.upper())

        if old_type and old_type != new_type:
            print('old_type: "%s", new_type: "%s"' % (old_type, new_type))
            self.reboot_and_wait()
            self.ssh_cmd('/export/netsys/src/scripts/%s-start' % new_type)
        elif old_type is None:
            self.ssh_cmd('/export/netsys/src/scripts/%s-start' % new_type)

        self.write_remote_file(fname, new_type)

    def get_remote_file_content(self, fname):
        try:
            cmd = ['ssh', self.hostname, 'cat', fname]
            print(' '.join(cmd))
            cnt = subprocess.check_output(cmd)
        except subprocess.CalledProcessError as e:
            #print('error', e)
            return None
        return cnt.decode('utf-8').strip()

    def ssh_cmd(self, cmd):
        if type(cmd) == str:
            cmd = [cmd]
        cmd = ['ssh', self.hostname] + cmd
        print(' '.join(cmd))
        return subprocess.run(cmd, check=True)

    def write_remote_file(self, fname, content):
        lname = '/tmp/tipsy.reboot.tmp'
        with open(lname, 'w') as f:
            f.write(content)
        cmd = ['scp', lname, '%s:%s' % (self.hostname, fname)]
        print(' '.join(cmd))
        subprocess.run(cmd, check=True)

    def reboot_and_wait(self):
        try:
            self.ssh_cmd(['sudo', 'reboot'])
        except subprocess.CalledProcessError as e:
            pass
        time.sleep(120)
        while self.get_remote_file_content('/etc/hostname') != self.hostname:
            time.sleep(15)
        print('!')


if __name__ == '__main__':
    Reboot()
